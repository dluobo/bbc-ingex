/***************************************************************************
 *   Copyright (C) 2006 by BBC Research   *
 *   info@rd.bbc.co.uk   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "help.h"
#include "ingexgui.h" //for constants

/// Sets up a tabbed dialogue of help text.
/// @param parent The parent window.
HelpDlg::HelpDlg(wxWindow * parent)
: wxDialog(parent, wxID_ANY, (const wxString &) wxT("Ingex Control Help"), wxDefaultPosition, wxSize(600, 400)) //cygwin needs the cast
{
	wxBoxSizer * sizer = new wxBoxSizer(wxVERTICAL);
	SetSizer(sizer);
	wxNotebook * notebook = new wxNotebook(this, -1);
	sizer->Add(notebook, 1, wxEXPAND | wxALL, 10);
	wxTextCtrl * project = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(project, wxT("Project Names"));
	project->SetValue(wxT("Each recording must have an associated project name.  The list of project names and the one which is selected are remembered between sessions.\n\nThe first time the application is run, it will not be able to find any saved project names, so will immediately produce the Set Project Names daialogue.  This will allow you to add a project name or accept the default suggestion.\n\nYou may access the dialogue again from the Misc menu, to add, change and delete project names, and to select a different one."));
	wxTextCtrl * intro = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(intro, wxT("Recorder selection"));
	intro->SetValue(wxT("In order to locate recorders, the controller must be given a reference to a CORBA name server as command line arguments.  (The warning given when these arguments are omitted shows the required format.)\n\nAvailable recorders are listed in the box in the top left hand corner of the application.  The adjacent refresh button will update the list, and can be used to try again should a transient network problem occur, or details of a recorder are stale because it has been re-started since the last time the list was updated.\n\nSelecting a recorder from the list will attempt to connect to it.  If any sources are currently recording, the controller will go into the record state, setting record enables to match what is currently recording, and displaying an unknown recording duration.  Otherwise, it will go into the stopped state, with no channels enabled.\n\nAny number of recorders can be selected.  Click on them again to disconnect.  You cannot do this while recording."));
	wxTextCtrl * roll = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(roll, wxT("Pre-roll and Post-roll"));
	roll->SetValue(wxT("When connected to at least one recorder, a dialogue can be accessed from the Misc menu to set pre-roll and post-roll.\n\nThe pre-roll slider allows you to add a variable amount of pre-roll to each recording.  Its maximum value depends on the capabilities of the recorders, and defaults to as close to ") + wxString::Format(wxT("%d frame%s"), DEFAULT_PREROLL, DEFAULT_PREROLL == 1 ? wxT("") : wxT("s")) + wxT(" as they allow.\n\nThe post-roll slider operates in a similar way, defaulting to as close to ") + wxString::Format(wxT("%d frame%s"), DEFAULT_POSTROLL, DEFAULT_POSTROLL == 1 ? wxT("") : wxT("s")) + wxT(" as possible.  Recorders are likely to allow an infinite amount of post-roll, in which case it is limited to ") + wxString::Format(wxT("%d frame%s."), DEFAULT_MAX_POSTROLL, DEFAULT_MAX_POSTROLL == 1 ? wxT("") : wxT("s")));
	wxTextCtrl * indicators = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(indicators, wxT("Indicators"));
	indicators->SetValue(wxT("Below the recorder selector and refresh button is a row of indicators.  The first shows the recorder status: stopped, recording, playing, playing backwards, paused or unknown.  Its function is echoed in the status text at the bottom of the window.  The unknown status is displayed between sending a command to the recorders and receiving a response from at least one of them.\n\nTo the right of the status display is studio timecode, as obtained from the recorders.  The title shows which recorder is supplying this timecode, if any.  It is followed by a health indicator which will warn if there has been any problem with the recording: currently this only detects the list of sources recording not matching those enabled to record, and stuck timecode.\n\nFinally, there is a duration display of the current recording.  This will show question marks if the recorder was already recording when you connected to it."));
	wxTextCtrl * transport = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(transport, wxT("Transport controls"));
	transport->SetValue(wxT("The record button can only be pressed if there is at least one source enabled for recording, and all enabled sources (apart from routers) have tape IDs, in which case it will be a dull red.  (If lack of tape IDs is preventing a recording occuring, the Set Tape IDs button will be orange to remind you that you must define some tape IDs before you can record.)  The record button changes to a bright red with no legend (as it can no longer be pressed) while recording.  F1 provides a shortcut key for recording.\n\nThe stop button can only be pressed while recording, and sets the displayed status to stopped immediately, even if the recorder is still postrolling.  F5 provides a shortcut key for stopping.  While recording, the \"Mark cue\" button (or shortcut F2) adds a line to the cue point display.\n\nDuring playback, the mark cue button becomes a play/pause button, which is enabled if the video player is functioning correctly.  It switches from play to pause, but labelled \"replay\", when playback reaches the end of the selected take, to allow the take to be re-played easily.  The stop button has no effect on playback.\n\nRecord/F1 can be pressed during playback, which will immediately stop playback (to reduce load on the recording system) and commence a new recording."));
	wxTextCtrl * sources = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(sources, wxT("Record tab"));
	sources->SetValue(wxT("Below the transport controls is the record tab, which can be clicked to reveal the project name box (set from the Misc menu) and the record source tree.  The space given to this tab can be varied by dragging the dotted splitter line below it.\n\nThe source tree can be expanded to show each of the recorder's sources, grouped by package name.  The package names are followed by tape IDs, if present, in brackets.  (To edit tape IDs, press the Set Tape IDs button.)  The source background colours indicate their type (audio, video or router).\n\nWhile not recording, the symbol next to each source, group, or the whole recorder can be clicked to toggle record enable.  The symbols for the groups and the recorder will reflect the individual sources, with a \"partially enabled\" indication if appropriate.\n\nWhile recording, the symbols change to show recording or partially recording.  If the selection of sources reported by the recorder to be recording does not match the selection requested, an alert symbol is shown.  This takes priority, so that if one source has a problem, its group and the recorder as a whole are shown to have a problem.  (The health indicator near the top of the screen will also show that a problem has occurred.)  The recorder is interrogated every ") + wxString::Format(wxT("%d second%s"), WATCHDOG_TIMER_LONG_INTERVAL/1000, WATCHDOG_TIMER_LONG_INTERVAL/1000 == 1 ? wxT("") : wxT("s")) + wxT(" or so and the symbols are updated accordingly."));
	wxTextCtrl * player = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(player, wxT("Video player and playback tab"));
	player->SetValue(wxT("As soon as a recording has been completed, the player is activated.  If an SDI card has been detected, playback defaults to SDI only, but simultaneous or exclusive playback to the computer monitor can be selected from the Player Type submenu of the Player menu, which also has an option to disable the player completely.  If SDI playback is disabled, the SDI card will output whatever is connected to its input.\n\nThe player window will only appear for the first time when at least one video file from the recording is available, which may take a while, depending on post-roll and the configuration of the recorder.  If not all files appear simultaneously, the player will start with what is available and reload automatically (maintaining its position in the recording) as more files become available.\n\nThe sources recorded during the take appear as radio buttons when the playback tab, below the transport controls, is clicked.  The space given to this tab can be varied by dragging the dotted splitter line below it.  Each radio button has a tool-tip showing the associated file name.  Only the sources currently available are enabled.\n\nIf more than one source is available, a quad split is also provided, and when selected the player window title will show the names of the sources displayed.  If more than four sources are available, the first four are shown on the quad split.  Note that it takes more processing power and bandwidth to display the quad split than an individual source, so the quad split may play slowly depending on the capabilities of the computer and the network.\n\nThe playback tab also shows the project name entered in the recording tab when the recording was made.\n\nPlayer-specific shortcut keys (see Shortcuts submenu of Help menu) are F5 and F6 to cycle through the sources, J, K and L for reverse/pause/forwards, and 3 and 4 for stepping.  All shortcut keys will work when either the controller or the player window (if present) has focus on the computer desktop.  However, when the controller has focus, the shortcut keys which are letters and numbers will only work as shortcuts when the playback tab is selected.  This is to avoid conflicts with entering text into the project name box on the record tab.  In addition, when the player has focus, left and right arrows become available as alternatives to 3 and 4 for stepping.\n\nWhen a new recording is made, the player window is blanked rather than disappearing.  This allows the player to maintain its position on the screen during a session.\n\nThe Player menu also contains options to show burnt-in position instead of timecode, or no burnt-in display at all.  Another sub-menu allows the window size can be changed, if the player is operating in the default accelerated mode.  If it does not display properly, it can be switched to unaccelerated operation, but then the aspect ratio is 4:3 and the size is fixed at maximum."));
	wxTextCtrl * cues = new wxTextCtrl(notebook, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_MULTILINE);
	notebook->AddPage(cues, wxT("Cue point display and controls"));
	cues->SetValue(wxT("When a significant event occurs during a recording, a line is added to the cue point display just above the bottom of the application window.  The space given to this display can be varied by dragging the dotted splitter line above it.  The display shows the type of event, and when it occurred both in absolute timecode and relative position.  The timecode values do not take into account network delays so will be approximate.\n\nCue points can be added at will with the \"Mark cue\" button (or F2), and problems with the sources are also logged.  During playback, cue points are automatically highlighted as they are played through, and the player will jump to them if they are clicked, and start playing from them if they are double-clicked.  (Note that the player's burnt-in timecode display appears in red when at a cue point.)  The adjacent take navigation buttons allow different recordings to be selected quickly (and have shortcuts).\n\nThere are Misc menu options to clear the cue point list, and prevent it logging more than one recording."));
};

/// Sets up a version reporting dialogue.
/// @param parent The parent window.
AboutDlg::AboutDlg(wxWindow * parent)
: wxDialog(parent, wxID_ANY, (const wxString &) wxT("About"))
{
	wxBoxSizer * sizer = new wxBoxSizer(wxVERTICAL);
	SetSizer(sizer);
	wxTextCtrl * textBox = new wxTextCtrl(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY | wxTE_RICH | wxTE_MULTILINE | wxTE_AUTO_URL | wxTE_CENTRE);
	sizer->Add(textBox, 1, wxEXPAND | wxALL, 10);
	textBox->SetValue(wxT("This is Ingexgui, the Ingex tapeless studio recorder controller.  Please send feedback to matthew@rd.bbc.co.uk.\n\nVersion $Id: help.cpp,v 1.1 2007/09/11 14:08:25 stuart_hc Exp $\n\nCopyright (C) BBC 2007\n\nMatthew Marks, $Date: 2007/09/11 14:08:25 $."));
};
